#include "LinkedList.h"

/*노드 생성*/
Node* SLL_CreateNode(ElementType NewData){
	Node *NewNode = (Node*)malloc(sizeof(Node));
	/*
	(void) -> (Node*)
		void를 Node 포인터 malloc으로 할당.Node포인터로 타입캐스팅(형변환) 하는 것을 의미

		Node만큼의 사이즈를 할당받은 malloc은 void*를 반환
		반환받은 void*를 node*로 형변환

		ex) int a = (int)9.1
	*/

	NewNode->Data = NewData;//데이터를 저장한다
	NewNode->NextNode = NULL;//다음노드에 대한 포인터는 NULL로 초기화한다

	return NewNode;//노드의 주소 반환

}

/*노드 소멸*/
void SLL_DestroyNode(Node* Node) {
	free(Node);
}

/*노드 추가*/
void SLL_AppendNode(Node** Head, Node* NewNode) {

	/*헤드 노드가 NULL이라면 새로운 노드가 Head
	*Head==NULL을 가리키는건지, *Head==NULL이다를 말해주는건지 모르는거니까 꼭 괄호를 붙여준다. 
	*/
	if ((*Head) == NULL) {
		*Head = NewNode;
	}
	else{
		/*테일을 찾아 NewNode를 연결한다*/
		Node *Tail = (*Head);
		while (Tail->NextNode != NULL) {  
			Tail = Tail->NextNode; //테일이 가리키는게 노드가 하나 더 있어.
		}
		Tail->NextNode = NewNode;//그럼 뉴 노드로 바꿔줘야함.
	}

	/*
	typedef struct Node{
    int data;
    struct Node* next;
	} Node;

	int main(void)
	{
    Node tmp1;
    tmp1.data = 1;  포인터 없이 접근하면 .으로
    
    Node *tmp2;
    tmp2->data = 2; 포인터로 접근하면 ->으로


    return 0;
	}
	*/
}

/*노드 삽입*/
void SLL_InsertAfter(Node* Current, Node* NewNode) {
	NewNode->NextNode = Current->NextNode;
	Current->NextNode = NewNode;
}

void SLL_InsertNewHead(Node** Head, Node* NewHead) {
	if (*Head == NULL) {
		(*Head) = NewHead;
	}

	else {
		NewHead->NextNode = (*Head);
		(*Head) = NewHead;
	}
}

/*노드 제거*/
void SLL_RemoveNode(Node** Head, Node* Remove) {
	if (*Head == Remove) {
		*Head = Remove->NextNode;
	}

	else {
		Node* Current = *Head;
		while (Current != NULL && Current->NextNode != Remove) {
			Current = Current->NextNode;
		}

		if (Current != NULL)
			Current->NextNode = Remove->NextNode;
	}
}

	

	/*노드 탐색*/
	Node* SLL_GetNodeAt(Node* Head, int Location) {
		Node* Current = Head;

		while(Current != NULL && (--Location) >= 0) {
			Current = Current->NextNode;
		}
		return Current;
	}
	/*노드 수 세기*/
	int SLL_GetNodeCount(Node* Head) {
		int Count = 0;
		Node* Current = Head;
		
		while (Current != NULL) {
			Current = Current->NextNode;
			Count++;
		}
		return Count;
	}



